{"version":3,"sources":["services/taskServices.js","Input.js","App.js","index.js"],"names":["apiUrl","getTasks","axios","get","updateTask","id","task","put","Input","handleTempTask","handleDelete","handleUpdate","useState","input","setinput","Paper","className","checked","completed","onClick","_id","onSubmit","e","preventDefault","variant","size","value","required","onChange","target","App","tasks","setTasks","button","setButton","trigger","setTrigger","activeTasks","setActiveTasks","completedTasks","setCompletedTasks","currentasks","setCurrentTask","activeLength","setactiveLength","getData","a","data","forEach","push","console","log","length","useEffect","handleSubmit","originalTasks","post","currentTask","index","findIndex","filter","delete","DeleteCompletedTask","message","elevation","style","margin","placeholder","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9c41487.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst apiUrl = \"https://react-to-doapp-server.herokuapp.com/api/tasks\";\r\n\r\nexport function getTasks() {\r\n     return  axios.get(apiUrl);\r\n}\r\n\r\nexport function addTask(task) {\r\n    return axios.post(apiUrl, task);\r\n}\r\n\r\nexport function updateTask(id, task) {\r\n    return axios.put(apiUrl + \"/\" + id, task);\r\n}\r\n\r\nexport function deleteTask(id) {\r\n    return axios.delete(apiUrl + \"/\" + id);\r\n}\r\nexport function deleteCompleted() {\r\n    return axios.delete(apiUrl + \"/\");\r\n}\r\nexport function updateTaskContent(id,task){\r\n    return axios.put(apiUrl + \"/Update\" + id, task);\r\n}","import React,{useState} from 'react'\r\nimport \"./App.css\";\r\nimport { Paper} from \"@material-ui/core\";\r\nfunction Input({task,handleTempTask,handleDelete,handleUpdate}) {\r\n    const [input, setinput] = useState(task.task);\r\n    return (\r\n        <div>\r\n            {\r\n                    <Paper\r\n                        key={task._id}\r\n                        className=\"flex task_container\"\r\n                    >\r\n                        <button\r\n                            checked={task.completed}\r\n                            onClick={() => handleUpdate(task._id)}\r\n                           className={task.completed?\"checked\":\"un-checked\"}\r\n                        />\r\n                        <form\r\n                         onSubmit={(e)=>{e.preventDefault();\r\n                             handleTempTask(input,task._id)}}\r\n                        >\r\n                          <input\r\n                    variant=\"outlined\"\r\n                    className={\r\n                                task.completed\r\n                                    ? \"task line_through\"\r\n                                    : \"task\"\r\n                            }\r\n                    size=\"small\"\r\n                    value={input}\r\n                    required={true}\r\n                    onChange={(e)=>{             \r\n                    setinput(e.target.value);\r\n                    }}\r\n\r\n                />\r\n                </form>\r\n                        <button\r\n                            onClick={() =>handleDelete(task._id)}\r\n                            className='destroy'\r\n                        >x\r\n                        </button>\r\n                    </Paper>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React,{useEffect, useState} from 'react'\r\nimport {\r\n    addTask,\r\n    getTasks,\r\n    updateTask,\r\n    deleteTask,\r\n    deleteCompleted,\r\n} from \"./services/taskServices\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport Input from './Input';\r\nimport \"./App.css\";\r\nfunction App() {\r\n\r\n    const [tasks, setTasks] = useState([{}]);\r\n    const [button,setButton]=useState(\"All\");\r\n    const [trigger,setTrigger]=useState(false);\r\n    const [activeTasks, setActiveTasks] = useState([]);\r\n    const [completedTasks, setCompletedTasks] = useState([]);\r\n    const [currentasks, setCurrentTask] = useState(\"\");\r\n    const [activeLength,setactiveLength]=useState(0);\r\n\r\n    async function getData(){\r\n       \r\n        \r\n        let { data } =await getTasks();\r\n        setTasks([])\r\n        setTasks(data);\r\n        let completedTasks=[],activeTasks=[]\r\ndata.forEach((task)=>{\r\n            if(task.completed){\r\n               completedTasks.push(task);\r\n                \r\n            }else{\r\n                activeTasks.push(task);\r\n            }\r\n        });\r\n        console.log(completedTasks)\r\n        setCompletedTasks([])\r\n        setActiveTasks([])\r\n        setCompletedTasks(completedTasks);\r\n        setActiveTasks(activeTasks);\r\n        setactiveLength(activeTasks.length);\r\n    };\r\n    useEffect(() => {\r\n    \r\n        getData();\r\n\r\n    }\r\n    , []);\r\n  \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const originalTasks = tasks;\r\n        try {\r\n            console.log(currentasks);\r\n            const { data } = await addTask({ task: currentasks });\r\n            originalTasks.push(data);\r\n            setCurrentTask(\"\");\r\n            setTrigger(!trigger);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const handleTempTask=async(task,id)=>{\r\ntry{\r\n        await updateTask(id,{\r\n    task:task,\r\n});\r\nsetTrigger(!trigger);\r\n}catch(error){\r\n    console.log(error);\r\n}\r\n;\r\n    }\r\n    \r\n  const handleUpdate = async (currentTask) => {\r\n        const originalTasks = tasks;\r\n        try {\r\n            const tasks = [...originalTasks];\r\n            const index = tasks.findIndex((task) => task._id === currentTask);\r\n            tasks[index] = { ...tasks[index] };\r\n            tasks[index].completed = !tasks[index].completed; \r\n            await updateTask(currentTask, {\r\n                completed: tasks[index].completed,\r\n            });\r\n            setTrigger(!trigger);\r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n        }\r\n    };\r\n    const handleDelete = async (currentTask) => {\r\n        console.log(currentTask)\r\n        const originalTasks = tasks;\r\n        try {\r\n          originalTasks.filter(\r\n                (task) => task._id !== currentTask\r\n            );\r\n            \r\n            await deleteTask(currentTask);\r\n            setTrigger(!trigger);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const DeleteCompletedTask = async () => {\r\n        try {\r\n           \r\n            const task=await deleteCompleted();\r\n            console.log(task.data.message);\r\n            setTrigger(!trigger);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getData();\r\n       console.log(\"triggered\");\r\n    }\r\n    , [trigger]);\r\n    return (\r\n        <div className=\"App flex\">\r\n        <Paper elevation={3} className=\"container\">\r\n            <div className=\"heading\">todos</div>\r\n            <form\r\n                onSubmit={handleSubmit}\r\n                className=\"flex\"\r\n                style={{ margin: \"0 0\" }}\r\n            >\r\n                <input\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    value={currentasks}\r\n                    className=\"inputText\"\r\n                    required={true}\r\n                    onChange={(e)=>{setCurrentTask(e.target.value)}}\r\n                    placeholder=\"What needs to be done?\"\r\n                />\r\n            </form>\r\n            <div className='task-container'>\r\n                {button===\"All\" && tasks.map((task,index) => (\r\n                <Input \r\n                    task={task}\r\n                    handleDelete={handleDelete}\r\n                    handleUpdate={handleUpdate}\r\n                    handleTempTask={handleTempTask}\r\n                />))\r\n                }\r\n                {button===\"Active\"&&activeTasks.map((task,index) => ( <Input \r\n                    task={task}\r\n                    handleDelete={handleDelete}\r\n                    handleUpdate={handleUpdate}\r\n                    handleTempTask={handleTempTask}\r\n                />\r\n                    ))}\r\n                    {button===\"Completed\"&&completedTasks.map((task,index) => (\r\n                        <Input \r\n                    task={task}\r\n                    handleDelete={handleDelete}\r\n                    handleUpdate={handleUpdate}\r\n                    handleTempTask={handleTempTask}\r\n                />))}\r\n            </div>\r\n            {tasks.length?<div><span className='active_length'>{activeLength} items left</span>\r\n        <button\r\n                   className={button===\"All\"?'selected-button':'status-buttons'}\r\n                   onClick={()=>{setButton(\"All\")}}\r\n                >\r\n                    All\r\n                </button>\r\n                <button\r\n                   className={button===\"Active\"?'selected-button':'status-buttons'}\r\n                    onClick={()=>{setButton(\"Active\")}}\r\n                >\r\n                   Active\r\n                </button>\r\n                <button\r\n                   className={button===\"Completed\"?'selected-button':'status-buttons'}\r\n                    onClick={()=>{setButton(\"Completed\")}}\r\n                >\r\n                Completed\r\n                </button>\r\n                {completedTasks.length>0?<button\r\n                    className='clear-completed'\r\n                    onClick={DeleteCompletedTask}\r\n                >\r\n               Clear Completed\r\n                </button>:null}</div>:null}\r\n        </Paper>\r\n       \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}